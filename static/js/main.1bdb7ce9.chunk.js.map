{"version":3,"sources":["game.js","App.js","index.js"],"names":["colors","attemptArr","totalAttempt","totalCountArr","color1","background","color2","color3","color4","color5","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateRandom","randomArray","count","i","Math","floor","random","length","push","console","log","setState","solution","submitAttempt","tempSolution","tempAttempt","state","option1","value","option2","option3","option4","option5","unshift","hiddenView","countTotal","blackCount","whiteCount","includes","j","resetColor","onChange","e","val","target","type","checked","changedBit","defineProperty","name","isChecked","position","className","_i3","pos","selectColor","id","makeItWorkState","attemptArr1","react_default","a","createElement","onClick","map","color","style","reversed","arrays","score","Component","App","game_Game","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1bdb7ce9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import Button from '@material-ui/core/Button';\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'black', 'ivory', 'sienna'];\n\nlet attemptArr = [];\nconst totalAttempt = [];\nlet totalCountArr = [];\n\n\nlet color1 = {background:'transparent'};\nlet color2 = {background:'transparent'};\nlet color3 = {background:'transparent'};\nlet color4 = {background:'transparent'};\nlet color5 = {background:'transparent'};\nlet winningMsg = 'You won!';\n\nexport default class Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hiddenView: false,\n      solution: [],\n      option1: {value: 'transparent', checked: false},\n      option2: {value: 'transparent', checked: false},\n      option3: {value: 'transparent', checked: false},\n      option4: {value: 'transparent', checked: false},\n      option5: {value: 'transparent', checked: false},\n      makeItWorkState: false,\n      attemptArr1: [],\n    }\n  }\n    generateRandom = () => {\n        let randomArray = [];\n        let count = 0;\n        while(count < 5) {\n            let i = Math.floor(Math.random() * (colors.length));\n            randomArray.push(colors[i]);\n            count++;\n        }\n        console.log(randomArray);\n        this.setState({solution: randomArray});\n        }\n\n    submitAttempt = () => {\n      let tempSolution = [];\n      let tempAttempt = [];\n\n        if(this.state.option1.value !== 'transparent' && this.state.option2.value !== 'transparent' && this.state.option3.value !== 'transparent' && this.state.option4.value !== 'transparent'   && this.state.option5.value !== 'transparent'){\n          attemptArr = [];\n          attemptArr.push(this.state.option1.value);\n          attemptArr.push(this.state.option2.value);\n          attemptArr.push(this.state.option3.value);\n          attemptArr.push(this.state.option4.value);\n          attemptArr.push(this.state.option5.value);\n          console.log('attemptArr', attemptArr)\n          totalAttempt.unshift(attemptArr);\n          if(this.state.solution[0]===attemptArr[0] && this.state.solution[1]===attemptArr[1] && this.state.solution[2]===attemptArr[2] && this.state.solution[3]===attemptArr[3] && this.state.solution[4]===attemptArr[4]){\n            this.setState({hiddenView: true});\n            console.log('you win');\n          }\n          else {\n            let countTotal = [];\n            let blackCount = '';\n            let whiteCount = '';\n            let noScore = 'orangered';\n\n            for(let i = 0; i < 5; i++){\n              tempSolution.push(this.state.solution[i]);\n              tempAttempt.push(attemptArr[i]);\n            }\n            for(let i = 0; i < 5; i++){\n              if(tempSolution[i] === tempAttempt[i]){\n                tempSolution[i] = 'used-blk';\n                tempAttempt[i] = 'checked';\n                blackCount = 'black'; \n                countTotal.push(blackCount);\n              }\n            }\n\n            for(let i = 0; i < 5; i++){\n              if(tempSolution.includes(tempAttempt[i])){\n                for(let j = 0; j < 5; j++){\n                  if(tempSolution[j] === tempAttempt[i]){\n                    tempSolution[j] = 'found-white';\n                    tempAttempt[i] = 'checked';\n                    whiteCount = 'ivory';\n                    countTotal.push(whiteCount);\n                    break;\n                  }\n                }\n              }\n            }\n\n            if(countTotal.length === 0){\n              countTotal.push(noScore);\n            }\n            totalCountArr.unshift(countTotal);\n          }\n        }\n          this.resetColor();\n    }\n       \n    \n    onChange = (e) => {\n        const val =\n        e.target.type === \"checkbox\"\n          ? e.target.checked\n          : e.target.value;\n    \n      const changedBit = {\n        [e.target.name]: val\n      };\n      this.setState(changedBit);\n    }\n    isChecked = (e) => {\n        let position = ['pos1', 'pos2', 'pos3', 'pos4', 'pos5'];\n        let val = e.target.className;\n        for(let pos of position){\n          if(pos === val){\n            val = pos;\n            \n            if(val === 'pos1' && this.state.option1.checked === false){\n              this.setState({option1: {checked: true}});\n            }\n            if(val === 'pos2' && this.state.option2.checked === false){\n              this.setState({option2: {checked: true}});\n            }\n            if(val === 'pos3' && this.state.option3.checked === false){\n              this.setState({option3: {checked: true}});\n            }\n            if(val === 'pos4' && this.state.option4.checked === false){\n              this.setState({option4: {checked: true}});\n            }\n            if(val === 'pos5' && this.state.option5.checked === false){\n              this.setState({option5: {checked: true}});\n            }\n          }\n        }\n      }\n    selectColor = (e) => {\n      let val = e.target.id\n      if(this.state.option1.checked === true){\n        this.setState({option1: {value: val, checked: false}});\n        color1 = {background: val};\n      }\n      if(this.state.option2.checked === true){\n        this.setState({option2: {value: val, checked: false}});\n        color2 = {background: val};\n      }\n      if(this.state.option3.checked === true){\n        this.setState({option3: {value: val, checked: false}});\n        color3 = {background: val};\n      }\n      if(this.state.option4.checked === true){\n        this.setState({option4: {value: val, checked: false}});\n        color4 = {background: val};\n      }\n      if(this.state.option5.checked === true){\n        this.setState({option5: {value: val, checked: false}});\n        color5 = {background: val};\n      }   \n    }\n\n    resetColor = () => {\n      this.setState({option1: {value: 'transparent', checked: false}});\n      color1 = {background: 'transparent'};\n      this.setState({option2: {value: 'transparent', checked: false}});\n      color2 = {background: 'transparent'};\n      this.setState({option3: {value: 'transparent', checked: false}});\n      color3 = {background: 'transparent'};\n      this.setState({option4: {value: 'transparent', checked: false}});\n      color4 = {background: 'transparent'};\n      this.setState({option5: {value: 'transparent', checked: false}});\n      color5 = {background: 'transparent'};\n    }\n\n    render() {\n\n      return (\n        <div className='main-container'>\n          <h2>Master Mind</h2>          \n          <button className='new-game-button' onClick={this.generateRandom}>new game</button>\n          <button className='submit-button' onClick={this.submitAttempt}>submit</button>\n\n          <div className='game-board-container'>\n\n                {this.state.hiddenView && <div>{this.state.solution.map(color => <div style={{background: color}} className='colorPosition'></div>)}<h2>{winningMsg}</h2></div>}\n                \n\n\n                \n          <div className='attempt-container'>\n            <ol reversed={true} className='attempt-row'>{totalAttempt.map(arrays => \n              <li>{arrays.map(color => <div className='colorPosition' style={{background: color}}></div> )}</li>)}\n            </ol>\n          </div>\n          <div className='attempt-container'>\n            <ul className='attempt-row'>{totalCountArr.map(count => \n              <li>{count.map(score => \n                <div className='score' style={{background: score}}></div>)}\n              </li>)}\n            </ul>\n          </div>\n          {/* <Divider/> */}\n          <div className='guess-container'>\n            <form onChange={this.isChecked}>\n              <div>\n                <label>\n                  <input type=\"checkbox\" className='pos1'/><div className='colorPicker' id='pos1' style={color1}>1</div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos2'/><div className=\"colorPicker\" id='pos2' style={color2}>2</div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos3'/><div className=\"colorPicker\" id='pos3' style={color3}>3</div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos4'/><div className=\"colorPicker\" id='pos4' style={color4}>4</div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos5'/><div className=\"colorPicker\" id='pos5' style={color5}>5</div>\n                </label>\n              </div>\n            </form>\n            <div>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"red\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"orange\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"yellow\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"green\"></button>\n            </div>\n            <div>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"blue\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"black\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"ivory\"></button>\n              <button className=\"colorChoices\" onClick={this.selectColor} id=\"sienna\"></button>\n            </div>\n          </div>\n        </div>\n        </div>\n            \n      );\n    }\n}","import React, { Component } from 'react';\nimport Game from './game';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}