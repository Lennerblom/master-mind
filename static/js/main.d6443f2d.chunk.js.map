{"version":3,"sources":["game.js","instructions.js","dashboard.js","App.js","index.js"],"names":["colors","attemptArr","totalAttempt","totalCountArr","color1","background","color2","color3","color4","color5","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gameStart","length","setState","hiddenView","gameOn","generateRandom","randomArray","count","i","Math","floor","random","push","console","log","solution","submitAttempt","tempSolution","tempAttempt","state","option1","value","option2","option3","option4","option5","unshift","countTotal","blackCount","whiteCount","includes","j","resetColor","onChange","e","val","target","type","checked","changedBit","defineProperty","name","isChecked","className","_arr","_i3","pos","selectColor","id","_this2","gameView","gameViewHide","react_default","a","createElement","style","display","onClick","map","color","reversed","arrays","score","Component","Instructions","buttonText","Dashboard","updateView","loginView","handleSlide","gameReturn","Slide_default","direction","in","mountOnEnter","unmountOnExit","instructions_Instructions","game_Game","App","isLoading","react_router_dom","react_router","exact","path","component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d6443f2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'black', 'ivory', 'sienna'];\n//const positions = ['pos1', 'pos2', 'pos3', 'pos4', 'pos5'];\n\nlet attemptArr = [];\nlet totalAttempt = [];\nlet totalCountArr = [];\n\n\nlet color1 = {background:'transparent'};\nlet color2 = {background:'transparent'};\nlet color3 = {background:'transparent'};\nlet color4 = {background:'transparent'};\nlet color5 = {background:'transparent'};\n//let colorSelected = [color1, color2, color3, color4, color5];\n\nlet winningMsg = 'You won!';\n\n\nexport default class Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hiddenView: false,\n      solution: [],\n      option1: {value: 'transparent', checked: false},\n      option2: {value: 'transparent', checked: false},\n      option3: {value: 'transparent', checked: false},\n      option4: {value: 'transparent', checked: false},\n      option5: {value: 'transparent', checked: false},\n      gameOn: false,\n    };\n  }\n\n  gameStart = () => {\n    if(totalAttempt.length > 0){\n      this.setState({hiddenView: false});\n      totalAttempt = [];\n      totalCountArr = [];\n    }\n    this.setState({gameOn: true});\n    this.generateRandom();\n  }\n    generateRandom = () => {\n        let randomArray = [];\n        let count = 0;\n        while(count < 5) {\n            let i = Math.floor(Math.random() * (colors.length));\n            randomArray.push(colors[i]);\n            count++;\n        }\n        console.log(randomArray);\n        this.setState({solution: randomArray});\n        }\n\n    submitAttempt = () => {\n      let tempSolution = [];\n      let tempAttempt = [];\n\n        if(this.state.option1.value !== 'transparent' && this.state.option2.value !== 'transparent' && this.state.option3.value !== 'transparent' && this.state.option4.value !== 'transparent'   && this.state.option5.value !== 'transparent'){\n          attemptArr = [];\n          attemptArr.push(this.state.option1.value);\n          attemptArr.push(this.state.option2.value);\n          attemptArr.push(this.state.option3.value);\n          attemptArr.push(this.state.option4.value);\n          attemptArr.push(this.state.option5.value);\n          console.log('attemptArr', attemptArr)\n          totalAttempt.unshift(attemptArr);\n          if(this.state.solution[0]===attemptArr[0] && this.state.solution[1]===attemptArr[1] && this.state.solution[2]===attemptArr[2] && this.state.solution[3]===attemptArr[3] && this.state.solution[4]===attemptArr[4]){\n            this.setState({hiddenView: true});\n            console.log('you win');\n          }\n          else {\n            let countTotal = [];\n            let blackCount = '';\n            let whiteCount = '';\n            let noScore = 'orangered';\n\n            for(let i = 0; i < 5; i++){\n              tempSolution.push(this.state.solution[i]);\n              tempAttempt.push(attemptArr[i]);\n            }\n            for(let i = 0; i < 5; i++){\n              if(tempSolution[i] === tempAttempt[i]){\n                tempSolution[i] = 'used-blk';\n                tempAttempt[i] = 'checked';\n                blackCount = 'black'; \n                countTotal.push(blackCount);\n              }\n            }\n\n            for(let i = 0; i < 5; i++){\n              if(tempSolution.includes(tempAttempt[i])){\n                for(let j = 0; j < 5; j++){\n                  if(tempSolution[j] === tempAttempt[i]){\n                    tempSolution[j] = 'found-white';\n                    tempAttempt[i] = 'checked';\n                    whiteCount = 'ivory';\n                    countTotal.push(whiteCount);\n                    break;\n                  }\n                }\n              }\n            }\n\n            if(countTotal.length === 0){\n              countTotal.push(noScore);\n            }\n            totalCountArr.unshift(countTotal);\n          }\n        }\n          this.resetColor();\n    }\n       \n    \n    onChange = (e) => {\n        const val =\n        e.target.type === \"checkbox\"\n          ? e.target.checked\n          : e.target.value;\n    \n      const changedBit = {\n        [e.target.name]: val\n      };\n      this.setState(changedBit);\n    }\n    isChecked = (e) => {\n        let position = ['pos1', 'pos2', 'pos3', 'pos4', 'pos5'];\n        let val = e.target.className;\n        for(let pos of position){\n          if(pos === val){\n            val = pos;\n            \n            if(val === 'pos1' && this.state.option1.checked === false){\n              this.setState({option1: {checked: true}});\n            }\n            if(val === 'pos2' && this.state.option2.checked === false){\n              this.setState({option2: {checked: true}});\n            }\n            if(val === 'pos3' && this.state.option3.checked === false){\n              this.setState({option3: {checked: true}});\n            }\n            if(val === 'pos4' && this.state.option4.checked === false){\n              this.setState({option4: {checked: true}});\n            }\n            if(val === 'pos5' && this.state.option5.checked === false){\n              this.setState({option5: {checked: true}});\n            }\n          }\n        }\n      }\n    selectColor = (e) => {\n      let val = e.target.id\n      if(this.state.option1.checked === true){\n        this.setState({option1: {value: val, checked: false}});\n        color1 = {background: val};\n      }\n      if(this.state.option2.checked === true){\n        this.setState({option2: {value: val, checked: false}});\n        color2 = {background: val};\n      }\n      if(this.state.option3.checked === true){\n        this.setState({option3: {value: val, checked: false}});\n        color3 = {background: val};\n      }\n      if(this.state.option4.checked === true){\n        this.setState({option4: {value: val, checked: false}});\n        color4 = {background: val};\n      }\n      if(this.state.option5.checked === true){\n        this.setState({option5: {value: val, checked: false}});\n        color5 = {background: val};\n      }   \n    }\n\n    resetColor = () => {\n      this.setState({option1: {value: 'transparent', checked: false}});\n      color1 = {background: 'transparent'};\n      this.setState({option2: {value: 'transparent', checked: false}});\n      color2 = {background: 'transparent'};\n      this.setState({option3: {value: 'transparent', checked: false}});\n      color3 = {background: 'transparent'};\n      this.setState({option4: {value: 'transparent', checked: false}});\n      color4 = {background: 'transparent'};\n      this.setState({option5: {value: 'transparent', checked: false}});\n      color5 = {background: 'transparent'};\n    }\n \n\n    render() {\n      let gameView = this.props.gameViewHide;\n      return (\n        <div className='main-container' style={{display: {gameView}}}>\n          <h2>Mastermind</h2>\n          <div className='button-container'>\n            <button className='new-game-button' onClick={this.gameStart}>new game</button>\n            <button className='submit-button' onClick={this.submitAttempt}>submit</button>\n          </div>\n          <div className='game-board-container'>\n\n                {this.state.hiddenView && <div className='hidden-solution'>{this.state.solution.map(color => <div style={{background: color}} className='colorPosition'></div>)}<h2>{winningMsg}</h2></div>}\n                \n          <div className='attempt-container'>\n            <ol reversed={true} className='attempt-row'>{totalAttempt.map(arrays => \n              <li>{arrays.map(color => <div className='colorPosition' style={{background: color}}></div> )}</li>)}\n            </ol>\n          </div>\n          <div className='attempt-container'>\n            <ul className='attempt-row'>{totalCountArr.map(count => \n              <li>{count.map(score => \n                <div className='score' style={{background: score}}></div>)}\n              </li>)}\n            </ul>\n          </div>\n\n          <div className='guess-container'>\n            {this.state.gameOn && <form onChange={this.isChecked}>\n              <div>\n                <label>\n                  <input type=\"checkbox\" className='pos1'/><div className='colorPicker' id='pos1' style={color1}></div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos2'/><div className=\"colorPicker\" id='pos2' style={color2}></div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos3'/><div className=\"colorPicker\" id='pos3' style={color3}></div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos4'/><div className=\"colorPicker\" id='pos4' style={color4}></div>\n                </label>\n                <label>\n                  <input type=\"checkbox\" className='pos5'/><div className=\"colorPicker\" id='pos5' style={color5}></div>\n                </label>\n              </div>\n            </form>}\n            <div className='selectColor-container'>\n              {colors.map(color => <button className=\"colorChoices\" onClick={this.selectColor} id={color}></button>)}\n            </div>\n          </div>\n        </div>\n        </div>\n            \n      );\n    }\n}","import React, { Component } from 'react';\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'black', 'ivory', 'sienna'];\n\n\nexport default class Instructions extends Component {\n    render() {\n        return (\n          <div className=\"instructions-container\">\n            <h2>How to play Mastermind</h2>\n            <div className=\"instructions-paragraph\">\n              <p>Mastermind is a classic logic game where you try to replicate the hidden color sequence based off of clues provided from each attempt.  The game is won when you successfully place all five colors in the right order.  The hidden solution is randomly selected and may contain any combintion from the eight colors including doubles, triples etc.</p>\n              <div className='selectColor-container'>\n                {colors.map(color => <button className='colorChoices' style={{background: color}}></button>)}\n              </div>\n              <p>To begin, click the New Game button.  Click the empty circles and assign each a color from the eight colors at the bottom.  Once all five circles in the attempt area have a color assigned, hit the submit button.\n              </p>\n              <p>Each attempt is scored with black, white or red pegs.</p> \n              <div className='score' style={{background: 'black'}}></div>\n              <div className='score' style={{background: 'white'}}></div>\n              <div className='score' style={{background: 'red'}}></div> \n              <p>Black pegs are scored first followed by white.  You earn a black peg for each correct color in the correct location in the sequence.  A white peg represents a color in the sequence, but not in the correct location.  A red peg indicates no colors in the attempt are present in the solution.  Through these clues, you can make logical deductions to solve the colored sequence.\n              </p> \n            </div>\n          </div>\n            \n        );\n    }\n}","import React, { Component } from 'react';\nimport Game from './game';\n//import { connect } from 'react-redux';\nimport Slide from '@material-ui/core/Slide';\n\n//import {userAdd, userDelete, userUpdate, userFetch } from './lib/user-reducer';\nimport Instructions from './instructions';\n\nlet buttonText = 'how to play'\n//let gaveView = 'inline-block';\nexport default class Dashboard extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loginView: true,\n            checked: false,\n            gameView: 'inline-block',\n        } \n    }\n\n    updateView = () => {\n        this.setState({loginView: false});\n    }\n\n    handleSlide = () => {\n        if(this.state.checked === false){\n        //   this.setState({gameView: 'none'});\n          this.setState({checked: true});\n          buttonText = 'return to game';\n        }\n        else{\n            // this.setState({gameView: 'inline-block'});\n          this.setState({checked: false});\n          buttonText = 'how to play'\n        }\n    }\n    gameViewHide = () => {\n        this.setState({gameView: 'none'})\n    }\n    gameReturn = () => {\n        this.setState({gameView: 'inline-block'})\n    }\n\n    render() {\n        //let gameView = this.state.gameView;\n        return (\n            \n            <div>\n                <button className='how-to-play' onClick={this.handleSlide}>{buttonText}</button>\n                <Slide direction=\"down\" in={this.state.checked} mountOnEnter unmountOnExit><Instructions className='instructions'/></Slide>\n                {/* {this.state.loginView && <Login onComplete={this.props.userAdd} viewChange={this.updateView}/>} */}\n                \n                <Game className='game' gameViewHide={this.gameViewHide} gameReturn={this.gameReturn}/>\n            </div>\n            \n        );\n    }\n}\n// const mapStateToProps = (state) => ({\n//     user: state.user,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//     userAdd: user => dispatch(userAdd(user)),\n//     userUpdate: user => dispatch(userUpdate(user)),\n//     userFetch: user => dispatch(userFetch(user)),\n//     userDelete: user => dispatch(userDelete(user)), \n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React, { Component } from 'react';\n//import {Provider} from 'react-redux';\nimport {HashRouter, Route, Switch, Link} from 'react-router-dom';\n//import createStore from './lib/store.js';\nimport Dashboard from './dashboard';\nimport Instructions from './instructions';\nimport Game from './game';\n//import LoadingScreen from './loadingScreen';\nimport './App.scss';\n\n//const store = createStore();\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {isLoading: true};\n  }\n\n  // componentDidMount(){\n  //   this.setState({isLoading: false});\n  // }\n  render() {\n    return (\n      <div className=\"App\">\n      {/* \n      {this.state.isloading ? <LoadingScreen/> : } */}\n\n        {/* <Provider store={store}> */}\n        <HashRouter>\n           <Switch>\n              <Route exact path=\"/\" component={Dashboard}/>\n              <Route exact path=\"/game\" component={Game}/>\n              <Route exact path=\"/instructions\" component={Instructions}/>\n          </Switch>\n        </HashRouter>\n        {/* </Provider> */}\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}